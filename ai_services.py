# ai_services.py

import os
import json
import google.generativeai as genai
from config import CURSOS # Importamos los cursos

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

def generar_reto_con_ia(nivel, tipo_reto, dificultad, tematica=None):
    if not GEMINI_API_KEY: return {"error": "IA no configurada."}
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    Eres LogicBot, un tutor de programaci√≥n divertido. Crea un reto de programaci√≥n para un estudiante de nivel {nivel}.
    - **Lenguaje/Tema:** {tipo_reto}
    - **Dificultad:** {dificultad}
    {f"- **Tem√°tica Espec√≠fica:** '{tematica}'." if tematica else ""}
    
    Tu respuesta DEBE ser un objeto JSON v√°lido con "enunciado", "solucion_ideal" y "pistas".
    - "enunciado": El texto del reto, claro, conciso y con emojis üí°.
    - "solucion_ideal": La soluci√≥n ejemplar en el lenguaje especificado.
    - "pistas": Un array de 3 strings con pistas conceptuales progresivas.
    """
    try:
        response = model.generate_content(prompt)
        # Limpieza robusta del JSON
        json_text = response.text.strip().replace("```json", "").replace("```", "")
        return json.loads(json_text)
    except (json.JSONDecodeError, Exception) as e:
        return {"error": f"No pude generar el reto. Error de IA: {e}"}

def evaluar_solucion_con_ia(reto_enunciado, solucion_usuario, tipo_reto):
    # (El prompt actual es muy bueno y cumple RF-14, se mantiene)
    if not GEMINI_API_KEY: return "‚ùå *INCORRECTO:* La evaluaci√≥n no est√° configurada."
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    **Contexto:** Eres un evaluador de c√≥digo que debe diferenciar entre una soluci√≥n y una pregunta.
    **Problema a Resolver:** "{reto_enunciado}"
    **Mensaje del Estudiante:** "{solucion_usuario}"
    **Instrucciones:**
    1.  **Clasifica:** ¬øEl mensaje contiene un bloque de c√≥digo que intenta resolver el problema? Si es una pregunta clara como "¬øc√≥mo funciona un bucle?" o "¬øpuedes ayudarme?", responde √öNICAMENTE con la palabra `[PREGUNTA]`.
    2.  **Eval√∫a:** Si el mensaje contiene lo que parece ser una soluci√≥n en c√≥digo {tipo_reto}, eval√∫ala. Si es correcta, empieza con "‚úÖ *¬°CORRECTO!*:". Si es incorrecta, empieza con "‚ùå *INCORRECTO:*:", seguido de una pista conceptual (no c√≥digo).
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‚ùå *INCORRECTO:* Hubo un problema con mi cerebro de IA. Error: {e}"

def chat_conversacional_con_ia(mensaje_usuario, historial_chat, tema_actual=None):
    # (El prompt actual cumple RF-12 y RF-16, se mantiene)
    if not GEMINI_API_KEY: return "Lo siento, el chat no est√° disponible."
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    Eres "LogicBot", un tutor de programaci√≥n amigable y conversacional. Tu objetivo es guiar al usuario para que resuelva los problemas por s√≠ mismo, no darle la respuesta.
    **Historial:** {historial_chat}
    **Mensaje del usuario:** "{mensaje_usuario}"
    {f"**Tema de la conversaci√≥n actual:** Est√°s ayudando al usuario con un reto sobre '{tema_actual}'." if tema_actual else ""}

    **REGLA DE ORO (MUY IMPORTANTE):**
    Bajo NINGUNA circunstancia escribas, completes o corrijas el c√≥digo del usuario. No des soluciones directas. Tu rol es hacer preguntas y dar pistas conceptuales para que el usuario llegue a la soluci√≥n por su cuenta.
    
    **Otras Reglas:**
    1.  **Si te piden ayuda:** Responde con una pregunta que le haga pensar. Ejemplo: "¬øQu√© crees que deber√≠a ir dentro de ese bucle para que se detenga?".
    2.  **Si te piden la soluci√≥n:** Ni√©gate amablemente. Ejemplo: "¬°El objetivo es que lo descubras t√∫! Sigue intent√°ndolo. Si te sientes muy atascado, siempre puedes escribir `me rindo`."
    3.  **S√© Contextual:** Si hay un 'Tema de la conversaci√≥n actual', enf√≥cate en ese tema.
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return "No estoy seguro de c√≥mo responder. Intenta con un comando como `menu`."

def explicar_tema_con_ia(tema):
    # (Sin cambios, cumple su funci√≥n perfectamente)
    if not GEMINI_API_KEY: return "Lo siento, no puedo generar la explicaci√≥n en este momento."
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    Eres un profesor de programaci√≥n excelente, capaz de explicar conceptos complejos de forma sencilla.
    **Tarea:** Explica el concepto de '{tema}' para un principiante.
    **Instrucciones:** Usa un lenguaje claro, analog√≠as, un peque√±o ejemplo de c√≥digo y emojis. Finaliza animando al estudiante.
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"No pude generar la explicaci√≥n. Error: {e}"