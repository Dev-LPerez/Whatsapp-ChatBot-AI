# ai_services.py

import os
import json
import google.generativeai as genai

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

def generar_reto_con_ia(nivel, tipo_reto, dificultad, tematica=None):
    if not GEMINI_API_KEY: return {"error": "IA no configurada."}
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    Eres LogicBot, un tutor de programaci√≥n divertido. Crea un reto de nivel {nivel}, dificultad **{dificultad}**, para **{tipo_reto}**. {f"El reto debe tratar sobre: '{tematica}'." if tematica else ""}
    Tu respuesta DEBE ser un objeto JSON v√°lido con "enunciado", "solucion_ideal" y "pistas".
    - "enunciado": El texto del reto, con t√≠tulo en negrita y emojis üí°.
    - "solucion_ideal": La soluci√≥n ejemplar.
    - "pistas": Un array de 3 strings con pistas progresivas.
    """
    try:
        response = model.generate_content(prompt)
        return json.loads(response.text.strip().replace("```json", "").replace("```", ""))
    except Exception as e:
        return {"error": f"No pude generar el reto. Error de IA: {e}"}

def evaluar_solucion_con_ia(reto_enunciado, solucion_usuario, tipo_reto):
    if not GEMINI_API_KEY: return "‚ùå *INCORRECTO:* La evaluaci√≥n no est√° configurada."
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    **Contexto:** Eres un tutor de programaci√≥n que debe diferenciar entre una soluci√≥n y una pregunta.
    **Problema a Resolver:** "{reto_enunciado}"
    **Mensaje del Estudiante:** "{solucion_usuario}"
    **Instrucciones:**
    1.  **Clasifica el Mensaje:** Primero, determina la intenci√≥n del mensaje. ¬øEs un intento de SOLUCI√ìN o es una PREGUNTA sobre el tema?
    2.  **Si es una PREGUNTA:** Tu √öNICA respuesta debe ser la palabra `[PREGUNTA]`. No respondas nada m√°s.
    3.  **Si es una SOLUCI√ìN:** Eval√∫a si el c√≥digo en {tipo_reto} resuelve el problema. Si es correcta, empieza con "‚úÖ *¬°CORRECTO!*:". Si es incorrecta, empieza con "‚ùå *INCORRECTO:*:", seguido de una pista.
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‚ùå *INCORRECTO:* Hubo un problema con mi cerebro de IA. Error: {e}"

def chat_conversacional_con_ia(mensaje_usuario, historial_chat, cursos_disponibles, tema_actual=None):
    if not GEMINI_API_KEY: return "Lo siento, el chat no est√° disponible."
    model = genai.GenerativeModel('gemini-1.5-flash')
    temas_python = ", ".join(cursos_disponibles['python']['lecciones'])
    prompt = f"""
    Eres "LogicBot", un tutor de programaci√≥n amigable y conversacional.
    **Historial:** {historial_chat}
    **Mensaje del usuario:** "{mensaje_usuario}"
    **Cursos que ofreces:** Python Essentials (Temas: {temas_python}).
    {f"**Tema de la conversaci√≥n actual:** Est√°s ayudando al usuario con un reto sobre '{tema_actual}'." if tema_actual else ""}

    **Reglas:**
    1.  **S√© Contextual:** Si se te da un 'Tema de la conversaci√≥n actual', tu respuesta DEBE enfocarse en explicar o aclarar dudas sobre ese tema.
    2.  **S√© √ötil:** Si el usuario pregunta qu√© temas ense√±as, responde amablemente listando los temas y an√≠male a `empezar curso python`.
    3.  **Gu√≠a:** Si el usuario parece perdido y no hay un tema actual, recu√©rdale los comandos (`empezar curso python`, `reto python`).
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return "No estoy seguro de c√≥mo responder. Intenta con un comando como `empezar curso python`."

def explicar_tema_con_ia(tema):
    if not GEMINI_API_KEY: return "Lo siento, no puedo generar la explicaci√≥n en este momento."
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    Eres un profesor de programaci√≥n excelente, capaz de explicar conceptos complejos de forma sencilla.
    **Tarea:** Explica el concepto de '{tema}' para un principiante.
    **Instrucciones:** Usa un lenguaje claro, analog√≠as, un peque√±o ejemplo de c√≥digo en Python y emojis. Finaliza animando al estudiante.
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"No pude generar la explicaci√≥n. Error: {e}"